// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CCPlugin
@_exported import CCPlugin
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Foundation
import SafariServices
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol CCPluginCompletionHandlerDelegate : AnyObject {
  func success()
  func failure()
  func purchasedOrNot(accessTime: Swift.Bool)
}
public protocol CCPluginSubscribeBtnTapDelegate : AnyObject {
  func subscribeBtnTap()
}
public protocol CCPluginSignBtnTapDelegate : AnyObject {
  func signInTap()
}
public protocol CCPluginUserDetailDelegate : AnyObject {
  func success(successData: Swift.String)
  func failure(error: Swift.String)
}
public protocol CCPluginUserDetailsDelegate : AnyObject {
  func success(userDetails: Swift.String)
  func failure(error: Swift.String)
}
public protocol CCPluginlogout : AnyObject {
  func succes(successData: Swift.String)
  func fail(error: Swift.String)
}
public protocol CCPluginAutoLogInDelegate : AnyObject {
  func autoLogInsuccess()
  func autoLogInfailure()
}
public protocol CCPluginGoogleLogInDelegate : AnyObject {
  func startGoogleLogin()
}
public enum Mode : Swift.String {
  case stage
  case sandbox
  case production
  case local
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CCplugin : ObjectiveC.NSObject {
  public static let shared: CCPlugin.CCplugin
  final public var mode: CCPlugin.Mode
  final public var debugMode: Swift.Bool
  final public var accentColor: UIKit.UIColor
  final public var pageLength: Swift.Int
  final public var scrollDepth: Swift.Int {
    get
    set
  }
  final public var scrollDepthPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  final public func configure(mode: CCPlugin.Mode = .stage, clientID: Swift.String)
  final public func showPayWall(contentID: Swift.String, title: Swift.String? = nil, categories: [Swift.String]? = nil, sections: [Swift.String]? = nil, tags: [Swift.String]? = nil, contentUrl: Swift.String? = nil, url: Swift.String? = nil, parentView: UIKit.UIView, googleLogInDelegate: (any CCPlugin.CCPluginGoogleLogInDelegate)? = nil, completiondelegate: any CCPlugin.CCPluginCompletionHandlerDelegate, subscriberDelegate: (any CCPlugin.CCPluginSubscribeBtnTapDelegate)? = nil, signInDelegate: (any CCPlugin.CCPluginSignBtnTapDelegate)? = nil)
  final public func initSubscriptions(contentID: Swift.String, title: Swift.String? = nil, url: Swift.String? = nil, parentView: UIKit.UIView, completiondelegate: any CCPlugin.CCPluginCompletionHandlerDelegate, subscriberDelegate: (any CCPlugin.CCPluginSubscribeBtnTapDelegate)? = nil, signInDelegate: (any CCPlugin.CCPluginSignBtnTapDelegate)? = nil, showCrossButton: Swift.Bool = false, googleLogInDelegate: (any CCPlugin.CCPluginGoogleLogInDelegate)? = nil)
  final public func autoLogIn(contentID: Swift.String, clientID: Swift.String, token: Swift.String, email: Swift.String? = "", phone: Swift.String? = "", parentView: UIKit.UIView, autoLogInDelegate: any CCPlugin.CCPluginAutoLogInDelegate)
  final public func getUserDetail(contentID: Swift.String, completiondelegate: any CCPlugin.CCPluginUserDetailsDelegate)
  final public func getlogout(logoutBtnDelegate: (any CCPlugin.CCPluginlogout)? = nil)
  final public func exitSDK()
  @objc deinit
}
extension CCPlugin.CCplugin {
  final public func handleRelaunchApp(url: Foundation.URL)
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public static var rootViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var topMostViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var presentedViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public static func topNavigationController(_ viewController: UIKit.UIViewController? = nil) -> UIKit.UINavigationController?
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var visibleViewController: UIKit.UIViewController? {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static func loadFromXib<T>(withOwner: Any? = nil, options: [UIKit.UINib.OptionsKey : Any]? = nil) -> T where T : UIKit.UIView
}
public struct ViewLayoutInfo {
  public var vc: UIKit.UIViewController
  public var view: UIKit.UIView
  public init(vc: UIKit.UIViewController, view: UIKit.UIView)
}
public struct UserDetails : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Address : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Wallet : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Balance : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CCPlugin.Mode : Swift.Equatable {}
extension CCPlugin.Mode : Swift.Hashable {}
extension CCPlugin.Mode : Swift.RawRepresentable {}
